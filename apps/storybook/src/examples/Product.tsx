import { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Card,
  CardContent,
  Button,
  Rating,
  List,
  ListItem,
  ListItemText,
} from '@mui/material';
import {
  type ProductResponse,
  type ProductReview,
  testProductsData,
} from '../test-utils/createProductMocks'; // Adjust the path as needed
import { createApiURL } from '../test-utils/createApiURL';

// ! Generated by ChatGPT
const Product = () => {
  const [productDetails, setProductDetails] = useState<ProductResponse | null>(
    null,
  );
  const [reviews, setReviews] = useState<ProductReview[]>([]);
  const [canReview, setCanReview] = useState<boolean>(false);

  useEffect(() => {
    // Simulating a fetch request for product details
    const fetchProductData = async () => {
      try {
        const response = await fetch(
          createApiURL(`/products/${testProductsData.id}`),
        );
        const data: ProductResponse | { errorType: string } =
          await response.json();

        if ('errorType' in data) {
          console.error('Error fetching product details:', data.errorType);
        } else {
          setProductDetails(data);
          setCanReview(data.canReview);
        }
      } catch (error) {
        console.error('Error fetching product details:', error);
      }
    };

    // Simulating a fetch request for reviews
    const fetchReviewData = async () => {
      try {
        const response = await fetch(
          createApiURL(`/products/${testProductsData.id}/reviews`),
        ); // Replace with your API endpoint
        const data: ProductReview[] = await response.json();
        setReviews(data);
      } catch (error) {
        console.error('Error fetching reviews:', error);
      }
    };

    fetchProductData();
    fetchReviewData();
  }, []);

  const createReview = async () => {
    if (!canReview) {
      console.warn('Reviews are currently disabled for this product.');
      return;
    }

    try {
      const newReview: ProductReview = {
        id: generateRandomKey(),
        customerName: generateRandomName(),
        review: generateRandomReviewText(),
        rating: generateRandomRating(),
      };

      // Simulating adding the new review to the existing reviews
      setReviews((prevReviews) => [...prevReviews, newReview]);

      // Simulating posting the new review to the API
      await postReviewToAPI(newReview);
    } catch (error) {
      console.error('Error creating review:', error);
    }
  };

  const postReviewToAPI = async (review: ProductReview) => {
    try {
      await fetch(
        createApiURL(`/products/${testProductsData.id}/reviews/create`),
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(review),
        },
      );

      // Uncomment the line below if you want to handle the response from the API
      // const responseData = await response.json();

      console.log('Review posted to API successfully!');
    } catch (error) {
      console.error('Error posting review to API:', error);
    }
  };

  const generateRandomKey = () => {
    return Math.random().toString(36).substring(7);
  };

  const generateRandomName = () => {
    const possibleNames = [
      'John Doe',
      'Jane Smith',
      'Alice Johnson',
      'Bob Anderson',
      'Eva Brown',
    ];
    return possibleNames[Math.floor(Math.random() * possibleNames.length)];
  };

  const generateRandomReviewText = () => {
    const possibleTexts = [
      'Amazing product!',
      'Not bad at all.',
      'Could be better.',
      'I love it!',
      'Disappointing.',
    ];
    return possibleTexts[Math.floor(Math.random() * possibleTexts.length)];
  };

  const generateRandomRating = () => {
    return (Math.floor(Math.random() * 5) + 1) as ProductReview['rating'];
  };

  if (!productDetails) {
    return <div>Loading...</div>;
  }

  return (
    <Container>
      <Card>
        <CardContent>
          <Typography variant="h4" gutterBottom>
            {productDetails.title}
          </Typography>
          <Typography variant="subtitle1" color="textSecondary" gutterBottom>
            {`Available Stock: ${productDetails.availableStock}`}
          </Typography>
          <Typography variant="subtitle1" color="textSecondary" gutterBottom>
            Using the mock dashboard opened with the button in the bottom right
            corner;
            <br />
            try changing the amount of stock and the "canReview" boolean.
            Toggling "productExists" to false will show this product page
            example does not handle API errors properly.
          </Typography>
          <Typography variant="subtitle1" color="textSecondary" gutterBottom>
            Try adding a review and reloading the page.
          </Typography>
          <Typography variant="h6" color="primary" gutterBottom>
            Generated by ChatGPT
          </Typography>
          <Button variant="contained" color="primary">
            Add to Cart
          </Button>
        </CardContent>
      </Card>

      <Typography variant="h5" mt={3} mb={2}>
        Customer Reviews
      </Typography>

      {canReview ? (
        <div>
          <List>
            {reviews.map((review) => (
              <ListItem key={review.id} disablePadding>
                <ListItemText
                  primary={review.customerName}
                  secondary={
                    <>
                      <Rating
                        name={`rating-${review.customerName}`}
                        value={review.rating}
                        readOnly
                      />
                      <Typography
                        component="span"
                        sx={{ display: 'block' }}
                        variant="body2"
                        color="textSecondary"
                      >
                        {review.review}
                      </Typography>
                    </>
                  }
                />
              </ListItem>
            ))}
          </List>

          <Button variant="outlined" color="primary" onClick={createReview}>
            Add a Review
          </Button>
        </div>
      ) : (
        <Typography variant="body1" mt={3}>
          Reviews are currently disabled for this product.
        </Typography>
      )}
    </Container>
  );
};

export default Product;
